environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.
    - PYTHON: "C:\\Python35"
    - example: qml-player
      name: win32
      platform: mingw
      qt: mingw492_32


install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel"
  - "%PYTHON%\\python.exe -m pip install requirements.txt"

build_script:
  - if %platform%==mingw set PATH=C:\Qt\5.5\%qt%\bin;C:\dev\dependencies\vlc-qt\bin;C:\Qt\Tools\mingw492_32\bin;C:\Program Files (x86)\CMake\bin
  - cd build
  - cmake ..\%example% -G %makefiles% -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="c:/dev/install"
  - if not %platform%==mingw (nmake) else (mingw32-make)
  - if not %platform%==mingw (nmake install) else (mingw32-make install)
  - if not %platform%==mingw (nmake windows) else (mingw32-make windows)
  - if %platform%==mingw set PATH=%ORIGPATH%

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "cd c_code"
  - "make -f MakeFileWindows clean"
  - "make -f MakeFileWindows"
  - "cd ../tests"
  - "python SortingTestSuite.py"


#after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
#  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

#artifacts:
  # bdist_wheel puts your built wheel in the dist directory
#  - path: dist\*